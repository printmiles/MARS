/* Class name: COMReaderThread
 * File name:  COMReaderThread.java
 * Created:    23-Jul-2008 17:55:36
 * Modified:   28-Jul-2008
 * Version History:
 * ~ ~ ~ ~ ~ ~ ~ ~ ~
 * 0.002  28-Jul-2008 Added means for received data to be echoed into the log and passed to a RMI connection.
 * 0.001  23-Jul-2008 Initial build
 */

package mars.deimos.object.thread;
import gnu.io.*;
import java.io.*;
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.util.logging.*;
import mars.deimos.object.logging.LoggerFactory;
import mars.deimos.remote.impl.*;
import mars.deimos.remote.intf.DeimosCOMTester;

/**
 * This class currently does not have any JavaDoc comments included
 * @version 0.002
 * @author Alex Harris (W4786241)
 */
public class COMReaderThread implements DataThread
{
  private boolean run;
  private Logger log;
  private String port;
  private int baud, data, parity, stop;
  private static final String parentClassName = "mars.deimos.object.thread.COMReaderThread";
  private static ConnectionFactory cfMars;
  
  public COMReaderThread(String comPortName, int baudRate, int dataBits, String parity, float stopBits)
  {
    log = LoggerFactory.getLogger(parentClassName);
    run = true;
    port = comPortName;
    baud = baudRate;
    setData(dataBits);
    setParity(parity);
    setStop(stopBits);
    if (cfMars == null)
    {
      // See if the connection factory to MARS needs to be setup (if it's null), and configure if needed.
      cfMars = new ConnectionFactory();
    }
  }
  
  public boolean isPortAvailable()
  {
    try
    {
      CommPortIdentifier cpiPort = CommPortIdentifier.getPortIdentifier(port);
      if (cpiPort.isCurrentlyOwned())
      {
        log.warning("Port (" + port + ") is currently in use.");
        return false;
      }
      else
      {
        log.config("Port (" + port + ") is available.");
        return true;
      }
    }
    catch (NoSuchPortException nspX)
    {
      log.warning("Port (" + port + ") does not exist on the local machine.");
      log.throwing("COMReaderThread", "isPortAvailable()", nspX);
      return false;
    }
  }
  
  public void run()
  {
    start();
  }
  
  /**
   * This adapts code from: <code>http://rxtx.qbang.org/wiki/index.php/Two_way_communcation_with_the_serial_port</code>
   */
  public void start()
  {
    if (port.equals("COM99"))
    {
      log.warning("Entering test script: COM Port 99");
      runTestScript();
      return;
    }
    try
    {
      CommPortIdentifier cpiPort = CommPortIdentifier.getPortIdentifier(port);
      CommPort cpCOM = cpiPort.open(this.getClass().getName(), 2000); // Not too sure what this line does. Not explained on RxTx site
      if (cpCOM instanceof SerialPort) // Check whether the com port we've just created is a SerialPort or not
      {
        SerialPort spThis = (SerialPort) cpCOM;
        spThis.setSerialPortParams(baud, data, stop, parity);
        log.finest("Created serial port instance for " + port);
        StringBuffer sB = new StringBuffer();
        BufferedInputStream bis = new BufferedInputStream(spThis.getInputStream());
        int asciiCode = 0;
        log.finest("Starting monitoring loop for " + port);
        while (run) // Use the boolean variable run here to control the execution of the thread
        {
          asciiCode = bis.read();
          switch (asciiCode)
          {
            case -1:
            {
              // Do nothing, this is generated by the link when not in use.
              break;
            }
            case 10:
            {
              if (sB.length() != 0) // Make sure that the string isn't zero-length
              {
                String message = sB.toString();
                System.out.println("Port (" + port + ") received: " + message);
                cfMars.sendCOMData(port, message);
                log.fine("Received message: " + message);
                sB.delete(0, sB.length());
                message = null;
                System.gc();
              }
              break;
            }
            case 13:
            {
              /*
               * Do nothing with this as this is a \n character.
               * In serial feeds this can occur more times than an actual end of line character (\n).
               */
              break;
            }
            default:
            {
              // Add the newly received character to the string we're building
              char aChar = (char) asciiCode;
              sB.append(aChar);
              break;
            }
          }
        }
      }
      else
      {
        // If the CommPort instance isn't an instance of SerialPort then another port type has crept in somehow.
        log.warning("Trying to working with a COM port which isn't serial. Aborting setup");
        return;
      }    
    }
    catch (NoSuchPortException nspX)
    {
      log.warning("Port (" + port + ") does not exist on the local machine");
      log.throwing("COMReaderThread", "start()", nspX);
    }
    catch (PortInUseException piuX)
    {
      log.warning("Port (" + port + ") is currently in use. Cannot establish control of the port");
      log.throwing("COMReaderThread", "start()", piuX);
    }
    catch (UnsupportedCommOperationException ucoX)
    {
      log.warning("Port (" + port + ") hs been requested to perform an operation that isn't supported");
      log.throwing("COMReaderThread", "start()", ucoX);
    }
    catch (IOException ioX)
    {
      log.warning("Problems were encountered while obtaining the InputStream associated with a COM Port");
      log.throwing("COMReaderThread", "start()", ioX);
    }
  }
  
  public void stop()
  {
    run = false;
  }
  
  private void setData(int dataBits)
  {
    switch (dataBits)
    {
      case 5:
      {
        data = SerialPort.DATABITS_5;
        break;
      }
      case 6:
      {
        data = SerialPort.DATABITS_6;
        break;
      }
      case 7:
      {
        data = SerialPort.DATABITS_7;
        break;
      }
      default:
      {
        data = SerialPort.DATABITS_8;
        break;
      }
    }
    log.config("Set data bits to: " + dataBits);
  }
    
  private void setParity(String parityValue)
  {
    String setValue = "";
    parity = SerialPort.PARITY_NONE;
    parityValue = parityValue.toLowerCase();
    if (parityValue.equals("even"))
    {
      parity = SerialPort.PARITY_EVEN;
      setValue = "Even";
    }
    if (parityValue.equals("odd"))
    {
      parity = SerialPort.PARITY_ODD;
      setValue = "Odd";
    }
    if (parityValue.equals("mark"))
    {
      parity = SerialPort.PARITY_MARK;
      setValue = "Mark";
    }
    // None is already set so we don't have to explicitly code it again
    log.config("Parity has been set to: " + setValue);
  }
    
  private void setStop(float stopValue)
  {
    if (stopValue == 1.5)
    {
      stop = SerialPort.STOPBITS_1_5;
    }
    if (stopValue == 2)
    {
      stop = SerialPort.STOPBITS_2;
    }
    if (stopValue == 1)
    {
      stop = SerialPort.STOPBITS_1;
    }
    log.config("Stop bits has been set to: " + stop);
  }
  
  private void runTestScript()
  {
    try
    {
      System.out.println("Attempting object to rmi registry bind");
      COMTestReader ctrDummyPort = new COMTestReader(this);
      DeimosCOMTester dctFakePort = (DeimosCOMTester) UnicastRemoteObject.exportObject(ctrDummyPort);
      // Finds the RMIRegistry instance on 127.0.0.1:1099 (Port 1099 on localhost, this machine)
      Registry reg = LocateRegistry.getRegistry();
      log.config("Binding object with a name of com99");
      reg.rebind("com99", dctFakePort);
      log.config("Object bound to RMI registry. Ready to accept connections on the default port (1099)");
      System.out.println("Binding done");

      String rmiName = "COM99Tester";
      String host = "localhost";
      log.fine("Attempting to establish RMI connection with: " + host);
      // Find the RMI server
      Registry regRMI = LocateRegistry.getRegistry(host, 1099);
      log.config("Found RMI server");
      // Locate and cast the object
      mars.test.COMInterface ciDummyPort = (mars.test.COMInterface) regRMI.lookup(rmiName);
      log.config("Connected to COMTester");
      System.out.println("Connected to COMTester");
      ciDummyPort.start("com99");
      System.out.println("Requesting object to start: com99");
    }
    catch (RemoteException rX)
    {
      System.out.println("RMI Exception caught");
      rX.printStackTrace();
      log.throwing(parentClassName, "startApp()", rX);
    }
    catch (Exception x)
    {
      System.out.println("Problems with binding");
      x.printStackTrace();
      log.severe("Problem starting the application");
      log.throwing(parentClassName, "startApp()", x);
    }
  }
  
  public void forceDataToMars(String message)
  {
    cfMars.sendCOMData(port, message);
    log.fine("Received message: " + message + " through the test");
  }
}